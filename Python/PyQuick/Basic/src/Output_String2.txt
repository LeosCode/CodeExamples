Google Course PyQuick
Python Test Exercises  String2

 D. verbing
 Given a string, if its length is at least 3,
 add 'ing' to its end.
 Unless it already ends in 'ing', in which case
 add 'ly' instead.
 If the string length is less than 3, leave it unchanged.
 Return the resulting string.
 
verbing( hail )	 OK  got: 'hailing' expected: 'hailing'
verbing( swiming )	 OK  got: 'swimingly' expected: 'swimingly'
verbing( do )	 OK  got: 'do' expected: 'do'


 E. not_bad
 Given a string, find the first appearance of the
 substring 'not' and 'bad'. If the 'bad' follows
 the 'not', replace the whole 'not'...'bad' substring
 with 'good'.
 Return the resulting string.
 So 'This dinner is not that bad!' yields:
 This dinner is good!
 
not_bad( This movie is not so bad )	 OK  got: 'This movie is good' expected: 'This movie is good'
not_bad( This dinner is not that bad! )	 OK  got: 'This dinner is good!' expected: 'This dinner is good!'
not_bad( This tea is not hot )	 OK  got: 'This tea is not hot' expected: 'This tea is not hot'
not_bad( It's bad yet not )	 OK  got: "It's bad yet not" expected: "It's bad yet not"


 F. front_back
 Consider dividing a string into two halves.
 If the length is even, the front and back halves are the same length.
 If the length is odd, we'll say that the extra char goes in the front half.
 e.g. 'abcde', the front half is 'abc', the back half 'de'.
 Given 2 strings, a and b, return a string of the form
  a-front + b-front + a-back + b-back
  
None
front_back( abcd xy )	 OK  got: 'abxcdy' expected: 'abxcdy'
front_back( abcde xyz )	 OK  got: 'abcxydez' expected: 'abcxydez'
front_back( Kitten Donut )	 OK  got: 'KitDontenut' expected: 'KitDontenut'
>>> 
